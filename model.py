import pandas as pd
import numpy as np
import requests as req
import pygame as pg
import matplotlib as mpl
import plotly as plt
import argparse as ap


# NOTE: this is serving as a preamble of init classes / importing parameters

SCREENSIZE = (800, 800)

# NOTE: handle argparsing
parser = ap.ArgumentParser(description="A script to generate an agent based model simulating paths generated by ants and their pheromone trails")

parser.add_argument("--agents", type=str, help="Max number of concurrent agents in the model")
parser.add_argument("--kernel", type=int, help="Selected turning kernel")
parser.add_argument("--fidelity", type=int, help="Select which fidelity case to model") 
#TODO: this may need to be a boolean
parser.add_argument("--max-time", type=int, help="Max simulation time our model will run")
parser.add_argument("--time-step", type=float, help="Time resolution of our model")

args = parser.parse_args()

class TurningKernel():
    # making a class for turning kernels to act as a template we can alter later
    def __init__(self, one:float = 0.25 , two:float = 0.25 , three:float = 0.25 , four:float = 0.25 )->None:
        self.left = one
        self.forward = two
        self.right = three
        self.backward = four

    def get_tk(self,):
        #TODO: need to figure out if this will randomly select a direction here, or pass the values,
        # if latter then this should not be a class
        pass


class Agent():

    class _Sprite(pg.sprite.Sprite):    
        def __init__(self, image, initial_position=(0, 0)):
            super().__init__()
            # Load the image for the agent
            # TODO: standardize image that comes in / size it
            self.image = pg.image.load(image)  
            self.rect = self.image.get_rect()
            # Set the initial position of the agent
            self.rect.topleft = initial_position  

        def update_position(self, new_position):
            # HACK: this may not be the best way todo this
            self.rect.topleft = new_position  
            pass

    def __init__(self, tk:TurningKernel, ):
        # init parameters 
        # self.saturation
        # PATH TO DEFAULT ANT SPRITE
        img = pg.image.load("")
        self._Sprite(image=img, initial_position=(SCREENSIZE[0]/2,SCREENSIZE[1]/2))


        pass

    
if __name__ == "__main__":
    # main program loop

    pg.init()
    board = pg.display.set_caption("simulation") 
    screen = pg.display.set_mode(SCREENSIZE)
    clock  = pg.time.Clock()

    all_agents = pg.sprite.Group() 
    # TODO: Agent Ids should probably be absolute, so this for loop may need to change
    for agent_id in range(0,args.agents):
        new_agent = Agent()
        all_agents.add()


